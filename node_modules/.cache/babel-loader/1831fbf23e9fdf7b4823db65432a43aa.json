{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _objectWithoutProperties2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectWithoutProperties\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf3 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _styles = require(\"@material-ui/core/styles\");\n\nvar _utils = require(\"@material-ui/utils\");\n\nvar _BreadcrumbCollapsed = _interopRequireDefault(require(\"./BreadcrumbCollapsed\"));\n\nvar _BreadcrumbSeparator = _interopRequireDefault(require(\"./BreadcrumbSeparator\"));\n\nvar _Typography = _interopRequireDefault(require(\"@material-ui/core/Typography\"));\n\nvar styles = {\n  /* Styles applied to the root element. */\n  root: {},\n\n  /* Styles applied to the ol element. */\n  ol: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    alignItems: 'center',\n    padding: 0,\n    // Reset\n    margin: 0,\n    // Reset\n    '& li': {\n      listStyle: 'none'\n    }\n  },\n\n  /* Styles applied to the li element. */\n  li: {},\n\n  /* Styles applied to the separator element. */\n  separator: {}\n};\n\nvar Breadcrumbs =\n/*#__PURE__*/\nfunction (_React$Component) {\n  (0, _inherits2.default)(Breadcrumbs, _React$Component);\n\n  function Breadcrumbs() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    (0, _classCallCheck2.default)(this, Breadcrumbs);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(Breadcrumbs)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      expanded: false\n    };\n\n    _this.handleClickExpand = function () {\n      _this.setState({\n        expanded: true\n      });\n    };\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(Breadcrumbs, [{\n    key: \"insertSeparators\",\n    value: function insertSeparators(items) {\n      var _this2 = this;\n\n      return items.reduce(function (acc, current, index) {\n        if (index < items.length - 1) {\n          acc = acc.concat(current, _react.default.createElement(_BreadcrumbSeparator.default // eslint-disable-next-line react/no-array-index-key\n          , {\n            key: \"separator-\".concat(index),\n            className: _this2.props.classes.separator\n          }, _this2.props.separator));\n        } else {\n          acc.push(current);\n        }\n\n        return acc;\n      }, []);\n    }\n  }, {\n    key: \"renderItemsBeforeAndAfter\",\n    value: function renderItemsBeforeAndAfter(allItems) {\n      var _this$props = this.props,\n          itemsBeforeCollapse = _this$props.itemsBeforeCollapse,\n          itemsAfterCollapse = _this$props.itemsAfterCollapse; // This defends against someone passing weird data, to ensure that if all\n      // items would be shown anyway, we just show all items without the EllipsisItem\n\n      if (itemsBeforeCollapse + itemsAfterCollapse >= allItems.length) {\n        return allItems;\n      }\n\n      return [].concat((0, _toConsumableArray2.default)(allItems.slice(0, itemsBeforeCollapse)), [_react.default.createElement(_BreadcrumbCollapsed.default, {\n        key: \"ellipsis\",\n        onClick: this.handleClickExpand\n      })], (0, _toConsumableArray2.default)(allItems.slice(allItems.length - itemsAfterCollapse, allItems.length)));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          children = _this$props2.children,\n          classes = _this$props2.classes,\n          classNameProp = _this$props2.className,\n          Component = _this$props2.component,\n          itemsAfterCollapse = _this$props2.itemsAfterCollapse,\n          itemsBeforeCollapse = _this$props2.itemsBeforeCollapse,\n          maxItems = _this$props2.maxItems,\n          separator = _this$props2.separator,\n          other = (0, _objectWithoutProperties2.default)(_this$props2, [\"children\", \"classes\", \"className\", \"component\", \"itemsAfterCollapse\", \"itemsBeforeCollapse\", \"maxItems\", \"separator\"]);\n\n      var allItems = _react.default.Children.toArray(children).filter(function (child) {\n        return _react.default.isValidElement(child);\n      }).map(function (child, index) {\n        return _react.default.createElement(\"li\", {\n          className: classes.li,\n          key: String(index)\n        }, child);\n      });\n\n      return _react.default.createElement(_Typography.default, (0, _extends2.default)({\n        component: Component,\n        color: \"textSecondary\",\n        className: (0, _classnames.default)(classes.root, classNameProp)\n      }, other), _react.default.createElement(\"ol\", {\n        className: classes.ol\n      }, this.insertSeparators(this.state.expanded || maxItems && allItems.length <= maxItems ? allItems : this.renderItemsBeforeAndAfter(allItems))));\n    }\n  }]);\n  return Breadcrumbs;\n}(_react.default.Component);\n\nprocess.env.NODE_ENV !== \"production\" ? Breadcrumbs.propTypes = {\n  /**\r\n   * The breadcrumb children.\r\n   */\n  children: _propTypes.default.node.isRequired,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css-api) below for more details.\r\n   */\n  classes: _propTypes.default.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: _propTypes.default.string,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a DOM element or a component.\r\n   * By default, it maps the variant to a good default headline component.\r\n   */\n  component: _utils.componentPropType,\n\n  /**\r\n   * If max items is exceeded, the number of items to show after the ellipsis.\r\n   */\n  itemsAfterCollapse: _propTypes.default.number,\n\n  /**\r\n   * If max items is exceeded, the number of items to show before the ellipsis.\r\n   */\n  itemsBeforeCollapse: _propTypes.default.number,\n\n  /**\r\n   * Specifies the maximum number of breadcrumbs to display. When there are more\r\n   * than the maximum number, only the first and last will be shown, with an\r\n   * ellipsis in between.\r\n   */\n  maxItems: _propTypes.default.number,\n\n  /**\r\n   * Custom separator node.\r\n   */\n  separator: _propTypes.default.node\n} : void 0;\nBreadcrumbs.defaultProps = {\n  component: 'nav',\n  itemsAfterCollapse: 1,\n  itemsBeforeCollapse: 1,\n  maxItems: 8,\n  separator: '/'\n};\n\nvar _default = (0, _styles.withStyles)(styles, {\n  name: 'MuiBreadcrumbs'\n})(Breadcrumbs);\n\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}